---
apiVersion: v1
kind: Template
labels:
  template: "${REPO_NAME}-template"
metadata:
  name: "${REPO_NAME}-backend-dc"
  creationTimestamp:
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp:
    labels:
      app: "${APP_NAME}-${JOB_NAME}"
    name: "${APP_NAME}-backend-${JOB_NAME}"
  spec:
    replicas: 2
    selector:
      app: "${APP_NAME}-${JOB_NAME}"
      deploymentconfig: "${APP_NAME}-backend-${JOB_NAME}"
    strategy:
      resources: {}
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp:
        labels:
          app: "${APP_NAME}-${JOB_NAME}"
          deploymentconfig: "${APP_NAME}-backend-${JOB_NAME}"
      spec:
        containers:
        - image: docker-registry.default.svc:5000/${NAMESPACE}/${REPO_NAME}-backend:${JOB_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: "/api"
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: "${APP_NAME}-backend-${JOB_NAME}"
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: "/api"
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          env:
          - name: OIDC_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: getok-oidc-secret
          - name: OIDC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: getok-oidc-secret
          - name: OIDC_PUBLICKEY
            valueFrom:
              secretKeyRef:
                key: publickey
                name: getok-oidc-secret
          - name: SERVER_FRONTEND
            value: "http://${HOST_ROUTE}"
          - name: SC_GETOKINT_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: getok-sc-getokint-secret
          - name: SC_GETOKINT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: getok-sc-getokint-secret
          - name: SC_GETOKTEST_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: getok-sc-getoktest-secret
          - name: SC_GETOKTEST_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: getok-sc-getoktest-secret
          - name: SC_GETOKPROD_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: getok-sc-getokprod-secret
          - name: SC_GETOKPROD_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: getok-sc-getokprod-secret
          - name: SC_MSSC_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: getok-sc-mssc-secret
          - name: SC_MSSC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: getok-sc-mssc-secret
          envFrom:
          - configMapRef:
              name: getok-oidc-config
          - configMapRef:
              name: getok-sc-config
          - configMapRef:
              name: getok-server-config
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - "${APP_NAME}-backend-${JOB_NAME}"
        from:
          kind: ImageStreamTag
          name: "${REPO_NAME}-backend:${JOB_NAME}"
          namespace: "${NAMESPACE}"
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp:
    labels:
      app: "${APP_NAME}-${JOB_NAME}"
    name: "${APP_NAME}-backend-${JOB_NAME}"
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: "${APP_NAME}-${JOB_NAME}"
      deploymentconfig: "${APP_NAME}-backend-${JOB_NAME}"
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: 'true'
    labels:
      app: "${APP_NAME}-${JOB_NAME}"
    name: "${APP_NAME}-backend-${JOB_NAME}"
  spec:
    host: "${HOST_ROUTE}"
    path: /api
    port:
      targetPort: 8080-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: "${APP_NAME}-backend-${JOB_NAME}"
      weight: 100
    wildcardPolicy: None
parameters:
- name: REPO_NAME
  description: Application repository name
  required: true
- name: JOB_NAME
  description: Job identifier (i.e. 'pr-5' OR 'master')
  required: true
- name: NAMESPACE
  description: Target namespace reference (i.e. 'k8vopl-dev')
  required: true
- name: APP_NAME
  description: Application name
  required: true
- name: HOST_ROUTE
  description: The host the route will use to expose service outside cluster
required: true